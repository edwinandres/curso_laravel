CONTROLLERS 
Para crear controladores se puede creando una archivo manualmente o tambien se puede
mediante php artisan asi : 

php artisan make:controller EjemploController
php artisan make:controller --resource EjemploController(crea metodos por defecto: index, create, store, show, edit, update, destroy)

RUTAS 
php artisan route:list //muestra una lista completa de todas las rutas de nuestro proyecto  
php artisan route:list --method=GET -r //la r dice que las traiga en orden desc(reverse)
php artisan route:list --name=posts //trae solo las rutas de posts

MODELOS  
php artisan make:model Cliente --migration


BOOTSTRAP
Para este proyecto se descagaron js y css de bootstrap y se incluyeron en la
ruta public/assets

BLADE   
Blade es un motor de plantillas, viene siendo un modelo para las plantillas, 
pero nosotros podemos crear nuestra propia estructura para las plantillas(layout)
En la plantilla usamos la palabra @yield para hacer una seccion reutilizable
por ejemplo @yield('cabecera')y en la vista donde queramos reutilizar eso empleamos
@section('cabecera) y cerramos con @endsection. 
Esto se usa para dar una estructura pareja a un proyecto sin tener que repetir codigo
Usando @include podemos agregar otros elementos a nuestra plantilla o vista
por ejemplo  @include('layouts.navbar')

MIGRACIONES
Para crear tablas en bases de datos usando laravel se requieren 3 pasos
1.Crear el archivo Migrations
2.Configurar el archivo migrations
3.Ejecutar php artisan migrate
Si ejecutamos este comando iniciando, se crearan 3 tablas ya que laravel viene con 3 archivos 
predeterminados (user, resetpasswords y failedjobs)
para crear una migracion personalizada usamos
php artisan make:migration create_articulos_table --create="articulos"
el crea el up y el down con campos por defecto (id y timestamps), ya nosotros
agregamos los que falten
php artisan rollback es un control+z(regresa una migracion hacia atras)
php artisan make:migration agregar_seccion_articulos --table=articulos (esto sirve para modificar la tabla articulos)
con el comando anterior podemos ir a esa migracion y agregar campos en el metodo up y usar dropColumn en el metodo down
php artisan migrate:refresh  hace rollingback a todo y vuelve y hace migraciones

RAW SQL
sql convencional , metodos estaticos, es mas comodo usar ORM ELOQUENT
los nombres de los campos  en la base de datos deben usar solo minusculas

ORM ELOQUENT
OBJECT RELATIONAL MAPPING (Mapeo de objetos relacional)
se usan modelos el modelo debe llamarse igual a la tabla pero en singular y con la primera
letra en mayusculas ejemplo para la tabla articulos el modelo se crea asi:
php artisan make:model Articulo
si no lo hace asi , se puede asignar en el modelo asi:
protected $table="nombredelatabla"
Para insertar tenemos los metodos create y save
con el metodo save primero instanciamos , agregamos los campos a la instancia y ejecutamos save sobre esa instancia
para el metodo create usamos un array asociativo
para eliminar delete, actualizar update. Para encontrar tenemos find, where, all

El softdelete necesita importar el sofdelete, dentro de la clase asignar a dates la columna deleted_at y crear ese campo
en la tabla(para esto ultimo se recomienda crear una migracion asi : 
php artisan make:migration add_deleted_at_column_to_articulos_table --table=articulos)
El registro no se borra de la base de datos , sino que se le crea un valor en la columna deleted_at
y si lo buscamos el no lo mostrara a menos que utilicemos el metodo withTrashed
podemos restablecer el registro borrado usando el metodo restore
para borrar definitivamente un campo definido como softdelete usamos el metodo hardDelete

RELACIONES ENTRE TABLAS
Debemos crear las relaciones dentro de los modelos de laravel
Estos modelos tienen unos metodos para poder definir el tipo de relacion, ya sea 
uno a uno, uno a muchos , muchos a muchos
En una relacion de uno a uno solo hace falta definir la relacion en la tabla que va a tener
su id dentro de la otra tabla.Pero tambien hay relaciones invertidas
